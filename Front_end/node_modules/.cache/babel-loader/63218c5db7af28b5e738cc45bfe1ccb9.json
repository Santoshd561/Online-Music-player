{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // // Login - get user token\n// export const loginUser = (userData, history)=> dispatch => {\n//   axios\n//     .post(\"/api/users/login\", userData)\n//     .then(res => {history.push(\"/\")\n//       const { token } = res.data;\n//       localStorage.setItem(\"jwtToken\", token);\n//       // Set token to Auth header\n//       setAuthToken(token);\n//       // Decode token to get user data\n//       const decoded = jwt_decode(token);\n//       // Set current user\n//       dispatch(setCurrentUser(decoded));\n//     })\n//     .catch(err =>\n//       dispatch({\n//         type: GET_ERRORS,\n//         payload: err.response.data\n//       })\n//     );\n// };\n\nfunction loginUser(username, password) {\n  return function (dispatch) {\n    dispatch(request({\n      username: username\n    }));\n    userService.login(username, password).then(function (user) {\n      dispatch(success(user));\n      history.push('/');\n    }, function (error) {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user: user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user: user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error: error\n    };\n  }\n} // Set logged in user\n\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["C:\\Users\\SANTOSH\\Desktop\\Front_end\\client\\src\\actions\\authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","username","password","request","userService","login","user","success","error","failure","toString","alertActions","userConstants","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","setCurrentUser","decoded","setUserLoading","logoutUser","localStorage","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n\n// // Login - get user token\n// export const loginUser = (userData, history)=> dispatch => {\n//   axios\n//     .post(\"/api/users/login\", userData)\n//     .then(res => {history.push(\"/\")\n//       const { token } = res.data;\n//       localStorage.setItem(\"jwtToken\", token);\n//       // Set token to Auth header\n//       setAuthToken(token);\n//       // Decode token to get user data\n//       const decoded = jwt_decode(token);\n//       // Set current user\n//       dispatch(setCurrentUser(decoded));\n//     })\n//     .catch(err =>\n//       dispatch({\n//         type: GET_ERRORS,\n//         payload: err.response.data\n//       })\n//     );\n// };\nfunction loginUser(username, password) {\n  return dispatch => {\n      dispatch(request({ username }));\n\n      userService.login(username, password)\n          .then(\n              user => { \n                  dispatch(success(user));\n                  history.push('/');\n              },\n              error => {\n                  dispatch(failure(error.toString()));\n                  dispatch(alertActions.error(error.toString()));\n              }\n          );\n  };\n\n  function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n  function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\n  function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n}\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}