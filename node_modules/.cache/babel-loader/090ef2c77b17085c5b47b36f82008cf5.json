{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - get user token\n\nexport var loginUser = function loginUser(email, password) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData)(email, password).then(function (user) {\n      dispatch(user);\n    }, function (error) {\n      dispatch(error.toString());\n      dispatch(error.toString());\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["C:\\Users\\SANTOSH\\Desktop\\Front_end\\client\\src\\actions\\authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","email","password","user","error","toString","setCurrentUser","decoded","setUserLoading","logoutUser","localStorage","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DT,IAAAA,KAAK,CACFU,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEb,UADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAHZ;AASD,GAV2B;AAAA,CAArB,C,CAaP;;AACA,OAAO,IAAMC,SAAS,GAAC,SAAVA,SAAU,CAACC,KAAD,EAAQC,QAAR;AAAA,SAAqB,UAAAb,QAAQ,EAAI;AACtDT,IAAAA,KAAK,CAEJU,IAFD,CAEM,qBAFN,EAE6BH,QAF7B,EAEwCc,KAFxC,EAE+CC,QAF/C,EAGSX,IAHT,CAIY,UAAAY,IAAI,EAAI;AACJd,MAAAA,QAAQ,CAACc,IAAD,CAAR;AAEH,KAPb,EAQY,UAAAC,KAAK,EAAI;AACLf,MAAAA,QAAQ,CAACe,KAAK,CAACC,QAAN,EAAD,CAAR;AACAhB,MAAAA,QAAQ,CAACe,KAAK,CAACC,QAAN,EAAD,CAAR;AACH,KAXb;AAaC,GAdoB;AAAA,CAAhB,C,CAiBP;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,OAAO,EAAI;AACvC,SAAO;AACLX,IAAAA,IAAI,EAAEZ,gBADD;AAELa,IAAAA,OAAO,EAAEU;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAO;AACLZ,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,IAAMwB,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAApB,QAAQ,EAAI;AAC1C;AACAqB,IAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACA9B,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAQ,IAAAA,QAAQ,CAACiB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAPyB;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n\n// Login - get user token\nexport const loginUser=(email, password) => dispatch => {\n  axios\n\n  .post(\"/api/users/register\", userData) (email, password)\n          .then(\n              user => { \n                  dispatch(user);\n                 \n              },\n              error => {\n                  dispatch(error.toString());\n                  dispatch(error.toString());\n              }\n          );\n  };\n\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}