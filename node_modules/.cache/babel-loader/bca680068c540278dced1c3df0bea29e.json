{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport config from 'config';\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - get user token\n\nexport var loginUser = function loginUser(email, password) {\n  return function (dispatch) {\n    var requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    };\n    return fetch(\"/api/users/login\", requestOptions).then(handleResponse).then(function (user) {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user));\n      return user;\n    });\n  };\n};\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logoutUser();\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n} // Set logged in user\n\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["C:\\Users\\SANTOSH\\Desktop\\Front_end\\client\\src\\actions\\authActions.js"],"names":["axios","setAuthToken","jwt_decode","config","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","email","password","requestOptions","method","headers","body","JSON","stringify","fetch","handleResponse","user","localStorage","setItem","text","parse","ok","status","logoutUser","error","message","statusText","Promise","reject","setCurrentUser","decoded","setUserLoading","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DV,IAAAA,KAAK,CACFW,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEb,UADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAHZ;AASD,GAV2B;AAAA,CAArB,C,CAaP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,QAAR;AAAA,SAAoB,UAAAb,QAAQ,EAAG;AACtD,QAAMc,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,QAAQ,EAARA;AAAT,OAAf;AAHa,KAAvB;AAMA,WAAOO,KAAK,qBAAqBN,cAArB,CAAL,CACFZ,IADE,CACGmB,cADH,EAEFnB,IAFE,CAEG,UAAAoB,IAAI,EAAI;AACV;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BN,IAAI,CAACC,SAAL,CAAeG,IAAf,CAA7B;AAEA,aAAOA,IAAP;AACH,KAPE,CAAP;AAQD,GAfwB;AAAA,CAAlB;;AAgBP,SAASD,cAAT,CAAwBZ,QAAxB,EAAkC;AAChC,SAAOA,QAAQ,CAACgB,IAAT,GAAgBvB,IAAhB,CAAqB,UAAAuB,IAAI,EAAI;AAChC,QAAMf,IAAI,GAAGe,IAAI,IAAIP,IAAI,CAACQ,KAAL,CAAWD,IAAX,CAArB;;AACA,QAAI,CAAChB,QAAQ,CAACkB,EAAd,EAAkB;AACd,UAAIlB,QAAQ,CAACmB,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACAC,QAAAA,UAAU;AAEb;;AAED,UAAMC,KAAK,GAAIpB,IAAI,IAAIA,IAAI,CAACqB,OAAd,IAA0BtB,QAAQ,CAACuB,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAOpB,IAAP;AACH,GAdM,CAAP;AAeD,C,CAED;;;AACA,OAAO,IAAMyB,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,OAAO,EAAI;AACvC,SAAO;AACL7B,IAAAA,IAAI,EAAEZ,gBADD;AAELa,IAAAA,OAAO,EAAE4B;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAO;AACL9B,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,IAAMiC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAA7B,QAAQ,EAAI;AAC1C;AACAuB,IAAAA,YAAY,CAACe,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACA/C,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAS,IAAAA,QAAQ,CAACmC,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAPyB;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport config from 'config';\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n\n// Login - get user token\nexport const loginUser = (email, password)=> dispatch =>{\n  const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password })\n  };\n\n  return fetch(`/api/users/login`, requestOptions)\n      .then(handleResponse)\n      .then(user => {\n          // store user details and jwt token in local storage to keep user logged in between page refreshes\n          localStorage.setItem('user', JSON.stringify(user));\n\n          return user;\n      });\n}\nfunction handleResponse(response) {\n  return response.text().then(text => {\n      const data = text && JSON.parse(text);\n      if (!response.ok) {\n          if (response.status === 401) {\n              // auto logout if 401 response returned from api\n              logoutUser();\n             \n          }\n\n          const error = (data && data.message) || response.statusText;\n          return Promise.reject(error);\n      }\n\n      return data;\n  });\n}\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}