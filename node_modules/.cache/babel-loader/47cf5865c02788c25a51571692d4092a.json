{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - get user token\n\nexport var loginUser = function loginUser(user) {\n  return function (dispatch) {\n    axios.post(\"/api/users/login\", user).then(function (res) {\n      // Save to localStorage\n      // // Set token to localStorage\n      // const { token } = res.data;\n      // localStorage.setItem(\"jwtToken\", token);\n      // // Set token to Auth header\n      // setAuthToken(token);\n      // // Decode token to get user data\n      // const decoded = jwt_decode(token);\n      // // Set current user\n      // dispatch(setCurrentUser(decoded));\n      console.log(token);\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser(history) {\n  return function (dispatch) {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["F:\\Git\\Online-Music-player\\Front_end\\src\\actions\\authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","user","console","log","token","setCurrentUser","decoded","setUserLoading","logoutUser","localStorage","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DT,IAAAA,KAAK,CACFU,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEb,UADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAHZ;AASD,GAV2B;AAAA,CAArB,C,CAcP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI;AAAA,SAAI,UAAAZ,QAAQ,EAAI;AAC3CT,IAAAA,KAAK,CACFU,IADH,CACQ,kBADR,EAC4BW,IAD5B,EAEGV,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAU,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD,KAhBH,EAiBGV,KAjBH,CAiBS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEb,UADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAjBZ;AAuBD,GAxB4B;AAAA,CAAtB,C,CA0BP;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,OAAO,EAAI;AACvC,SAAO;AACLV,IAAAA,IAAI,EAAEZ,gBADD;AAELa,IAAAA,OAAO,EAAES;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAO;AACLX,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,IAAMuB,UAAU,GAAG,SAAbA,UAAa,CAACpB,OAAD;AAAA,SAAa,UAAAC,QAAQ,EAAI;AACjD;AACAoB,IAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB,EAFiD,CAGjD;;AACA7B,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJiD,CAKjD;;AACAQ,IAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AAED,GARyB;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n\n\n// Login - get user token\nexport const loginUser = user => dispatch => {\n  axios\n    .post(\"/api/users/login\", user)\n    .then(res => {\n      // Save to localStorage\n\n      // // Set token to localStorage\n      // const { token } = res.data;\n      // localStorage.setItem(\"jwtToken\", token);\n      // // Set token to Auth header\n      // setAuthToken(token);\n      // // Decode token to get user data\n      // const decoded = jwt_decode(token);\n      // // Set current user\n      // dispatch(setCurrentUser(decoded));\n     \n      console.log(token);\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = (history) => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n \n};\n"]},"metadata":{},"sourceType":"module"}